@page "/"
@using BlazorSchool.Components.Web.UI
@using BlazorSchool.Components.Web.Variants
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Welcome to Badge Generator!</h1>

App to easily generate badges for Jagiellonian University rooms.

<BlazorLibrary>
    <div class="generator">
        <div class="generator__editWindow">
            <BlazorCaptureElement Token="Form" class="flex-fill">
                <div class="generator__header">
                    <BlazorCaptureElement Token="Logo" class="flex-fill"  >
                        <img src="/logo_uj.png" alt="placeholder"
                             @* style="position: absolute;top: @($"{offsetX}px"); @(logo != null ? $"{offsetY}px" : "0"); cursor: move" *@
                             @* id="draggableImage"/> *@/>
                    </BlazorCaptureElement>
                    @if (editMode)
                    {
                        <textarea class="roomNumber" rows="1" cols="10" @bind="@roomNumber"></textarea>
                    }
                    else
                    {
                        <p class="roomNumber">@roomNumber</p>
                    }
                </div>

                @if (editMode)
                {
                    <textarea class="names" rows="4" cols="20" @bind="@names"></textarea>
                }
                else
                {
                    <div class="names__container">
                    @foreach (var name in names.Split('\n'))
                                        {
                                            <p class="names__name">@name</p>
                                        }    
                    </div>
                }



            </BlazorCaptureElement>
        </div>

        <div class="generator__controlPanel hideWhenPrint">

            <button class="generator__button" @onclick="OnShowRoomNumberClick"> Numer sali </button>
            <button class="generator__button" @onclick="OnShowNamesClick"> Nazwiska </button>
            <button class="generator__button" @onclick="OnShowLoadClick"> Wczytaj </button>
            <button class="generator__button" @onclick="@(() => { editMode = true; })"> Edytuj </button>
            <button class="generator__button" @onclick="SaveAsJson"> Zapisz do JSONA </button>

            @if (editMode)
            {
                <button class="generator__button" @onclick="@(() => { editMode = false; })"> Zapisz zmiany </button>
            }
            else
            {
                <BlazorCapturePdfButton OverrideComponentCss="true" style="    background-color: var(--gold) ;
                                                                                border: 2px solid var(--dark-olive);
                                                                                color:  var(--dark-text-blue);
                                                                                border-radius: 1rem;
                                                                                text-align: center;
                                                                                justify-content: center;
                                                                                flex: 1;
                                                                                padding: 0.5rem 0;
                                                                                margin: 0.25rem 0 0.25rem;
                                                                                line-height: 2rem;"

                                        TargetToken="Form">
                    Zapisz do PDF
                </BlazorCapturePdfButton>
            }


        </div>
    </div>

</BlazorLibrary>

<Modal @ref="RoomNumber" title="Numer sali" IsVerticallyCentered="true">
    <BodyTemplate>
        <input type="text" @bind="roomNumber"/>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

<Modal @ref="Names" title="Nazwiska" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="form-group">
            @if (names.Split('\n').Length < 5)
            {
                <input type="text" value="@tempName" @oninput="UpdateTempName" class="form-control" placeholder="Podaj nazwisko"/>
                <button class="btn btn-primary" @onclick="AddName">Add</button>
            }
            else
            {
                <div>Nie możesz dodać więcej nazwisk!</div>
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

<Modal @ref="Load" title="Wczytaj" IsVerticallyCentered="true">
    <BodyTemplate>
        <InputFile OnChange="@LoadFiles"/>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

@code {
    private Modal RoomNumber = default!;
    private Modal Names = default!;
    private Modal Load = default!;
    private string? roomNumber;
    private ElementReference Img;
    private IBrowserFile? loadedFile;
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private string tempName = "";
    private string names = "";
    private bool editMode = false;

    private RoomInfo? info = new RoomInfo();
    private Logo? logo = new Logo();
    private People? people = new People();

    private void UpdateTempName(ChangeEventArgs e)
    {
        tempName = e.Value.ToString();
    }

    private void AddName()
    {
        if (tempName.Length > 0) names = names + '\n' + tempName;
        tempName = "";
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFile = e.File;

        using (var stream = loadedFile.OpenReadStream())
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            info = await JsonSerializer.DeserializeAsync<RoomInfo>(stream, options);
            names = info.Names;
            roomNumber = info.RoomNumber;
        }
    }

    private async Task SaveAsJson()
    {
        RoomInfo data = new BlazorApp.Components.Pages.RoomInfo();
        data.RoomNumber = roomNumber;
        data.Names = names;
        var json = System.Text.Json.JsonSerializer.Serialize(data);

        var jsRuntime = JS;

        await jsRuntime.InvokeVoidAsync("saveAsFile", "data.json", json, "application/json");
    }

    private async Task OnShowRoomNumberClick()
    {
        await RoomNumber.ShowAsync();
    }

    private async Task OnShowNamesClick()
    {
        await Names.ShowAsync();
    }

    private async Task OnShowLoadClick()
    {
        await Load.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await RoomNumber.HideAsync();
        await Names.HideAsync();
        await Load.HideAsync();
    }
}